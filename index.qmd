---
title: "My wonderful paper"
abstract: "In data analysis, unexpected results often prompt researchers to revisit their procedures to identify potential issues. While experienced researchers can often quickly diagnose problems by checking a few key assumptions, others may struggle to identify the root causes. These checked assumptions, or expectations, are typically informal, difficult to trace, and rarely discussed in publications. In this paper, we formalize these informal assumptions by framing them as binary *analysis validation checks*. We then introduce a procedure to quantify how violations of these checks may lead to unexpected results in the analysis. The procedure relies on simulations of the original data and evaluates both accuracy and redundancy. Accuracy is calculated through a binary classification metric, while redundancy is measured using mutual information. We demonstrate this approach with a toy example based on fitness step count data and a generalized linear model example examining the effect of particulate matter air pollution on daily mortality. "
author:
  - name: H. Sherry Zhang
    email: huize.zhang@austin.utexas.edu
    affiliations: 
        - id: 1
          name: University of Texas at Austin
          department: Department of Statistics and Data Sciences
          city: Texas
          country: United States
          postal-code: 78705
    attributes:
        corresponding: true
  - name: Roger D. Peng
    email: roger.peng@austin.utexas.edu
    affiliations: 
        - id: 1
          name: University of Texas at Austin
          department: Department of Statistics and Data Sciences
          city: Texas
          country: United States
          postal-code: 78705
cite-method: natbib
bibliography: references.bib
format:
 tandf-pdf:
   keep-tex: true
   fontsize: 12pt
   linestretch: 2
   notebook-links: false
preamble: >
  \usepackage{amsfonts,amsmath,amssymb,amsthm}
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, cache = TRUE)
library(tidyverse)
library(patchwork)
library(MASS)
library(ggh4x)
library(adtoolbox)
library(broom)
library(knitr)
library(rpart)
library(infotheo)
pm10 <- read_csv(here::here("data", "pm10.csv")) |> 
  filter(!is.na(pm10)) |>    
  mutate(season = as.factor(season))  
```


README: 

* *Check for TODOs*, things inside "[...]", other than references, are my comments
- Literature review: Section *diagnosing unexpected outcomes in data analysis* 
- *Discussion* and *Conclusion*
- In Section *Application*: provide more context on the PM10-mortality study and add reference of the [0, 0.005] PM10 coefficient

\newpage

# Introduction

In data analysis, experienced researchers often rely on their prior knowledge or domain expertise to quickly assess whether results align with their expectations. When a result falls outside of this interval, it prompts the researchers to investigate backwards on the data quality, the analysis steps, or the assumptions made during the analysis process. This mental process of where to diagnose unexpected outcomes is often difficult to trace and discuss in publications. As a result, readers are typically presented with the final outcomes of the analysis cycle where the results and expectations are aligned, achieved either by refining the analysis or updating the expectations based on statistical evidence [@grolemund_cognitive_2014]. These missing pieces of information provides little guidance for diagnosing issues in the analysis when the same methodology is applied to a new dataset that produces different outcomes. Similarly, when researchers with different background knowledge view results that they find to be unexpected, it becomes unclear whether discrepancies arise from differing expectations or from the use of statistical techniques.

One might gain insight into analysts' thought processes by speaking with them directly or watching them work via screencast videos they produce, such as, TidyTuesday screencast videos or think-aloud type studies [e.g. @gu2024data]. However, direct observation of analysis is not scalable and may not always be feasible; creating educational screencast videos requires significant effort from the researchers. Ideally, there could be a way to make expectations about data analysis explicit and accessible to others. Even better, if the encoding were machine-readable, we could analyze these expectations and learn from the analysis itself. For example, we could answer questions about whether the checks also apply to other researchers analyzing new data in the same context, whether they reflect common practices in the field, or whether they are specific to the data or analysis at hand. 

The externalization of the data analysis process is a practice that has potential to improve the trustworthiness of analyses in general and the trustworthiness of subsequent products, such as machine learning models, that may be built on such analyses. While publication of analysis code and data is now a common a requirement for the sake of reproducibility [@peng2011reproducible], the publication code alone is often insufficient for understanding the thought process behind an analysis. Code corresponding to published analyses often reflect the final decisions made about analysis and do not reveal the decisions or assumptions made about the data processing. Thus, a reader looking at published code can often be left with many questions about why certain choices were made. Developing an approach to reveal some of this process without requiring a reader to essentially reconstruct the analysis process from the raw data would provide an improved basis for trusting an analysis result [@peng2021reproducible].

In this paper, we conceptualize these internal expectations and assumptions as *analysis validation checks*, which allows us to examine the assumptions made during an analysis and to diagnose unexpected outcomes. We then introduce a procedure that provides a quantitative measure of how violations in a tree of analysis checks, derived from individual checks, will lead to an unexpected result. The procedure, based on simulations of the original data, calculates the accuracy and redundancy of the analysis checks. Accuracy is determined using binary classification metrics, precision and recall, from a logic regression fit [@ruczinski_logic_2003], while redundancy is measured using mutual information. The proposed workflow offers a numerical guarantee that the analysis will produce the expected results, assuming the assumptions about the data generating mechanism hold.

The rest of the paper is organized as follows: @sec-lit-review reviews the concepts of diagnosing unexpected outcomes and general data quality checks. @sec-plan introduces the concept of analysis validation checks, illustrated with a toy example based on fitness step count data. @sec-method describes the procedure that quantifies how analysis validation checks combined using logical operators can predict unexpected outcomes in an analysis. @sec-pm10-mortality applies this procedure to a larger example that estimates the effect of particulate matter air pollution on daily mortality. @sec-discussion discusses a few key considerations and @sec-conclusion concludes the paper.

# Related Work {#sec-lit-review}



## Diagnosing unexpected outcomes in data analysis

The concept of framing data analysis as a sense-making process was originally presented by [@grolemund_cognitive_2014] based on seminal work by [@wild1999statistical]. Key to any sense-making process is a model for the world (i.e. expectations for what we might observe) and observed data with which we can compare our expectations. If there is a significant deviation between what we observe and our expectations, then a data analysis must determine what is causing that deviation. A naive approach would be to update our model for the world to match the data, under the assumption that the initial expectation was incorrect. However, experienced analysts know that the reality can be more nuanced than that, with errors occurring in data collection or data processing that can have an impact on final results. 

The skill of diagnosing unexpected data analysis results is not one that has received significant attention in the statistics literature. While the concept of diagnosis is often embedded in model checking or data visualization techniques, systematic approaches to identifying the root cause of an unexpected analysis result are typically not presented [@peng2022perspective]. [@peng_diagnosing_2021] proposed a series of exercises for training students in data analysis to diagnose different kinds of analysis problems such as coding errors or outliers. They provide a systematic approach involving working backwards from the analysis result to identify potential causes. There are parallels here to the concept of debugging and testing in software engineering [@donoghue2021teaching]. For example, [@li2019towards] found that experienced engineers were generally able to identify problems in code faster than novices, and that the ability to debug code required knowledge that cut across different domains. 

If it is true that the speed with which data analysts can identify problems with an analysis is related to their experience working with a given type of data, then there is perhaps room to improve the analytic process by externalizing the aspects that an analyst learns through experience. That way, inexperienced analysts could examine the thought process of an experienced analyst and learn to identify factors that can cause unexpected results to occur.


## Data analysis checks 

A substantial body of literature has addressed the definition of data quality [@8642813, more] and developed frameworks, that includes dimensions, attributes, and measures to evaluate and improve data quality [@cai2015challenges; @wang1996beyond; @6204995; @woodall2014classification]. These frameworks are often used information system and database management and support business decision-making in the industry. For research purposes, high-quality data ensures the credibility of scientific findings and supports reproducibility and reusability in future studies [ref]. With the growing prevalence of open data in scientific research, the consumers or users of the data typically are no longer the data producers or collectors who have the full knowledge of data in hand, prompting more interest towards the data quality checks in the data analysis process. In R, there are some packages, like `skimr` [@skimr] and `dataMaid` [@dataMaid], provides basic data screening and reporting, while another class of packages, e.g. `assertr` [@assertr], `validate` [@validate], and `pointblank` [@pointblank] focuses on providing data validation tools, allowing users to define customized data quality checks based on the applications. 




# Analysis validation checks {#sec-plan}

Expectations represent our understanding of certain aspects of the analysis and the data, independent of the analysis itself. When outcomes deviate from these expectations, analysts often revisit the analysis cycle to identify potential issues, refine methods, or revise assumptions. Experienced analysts can typically identify issues quickly and correct them on the spot, but they often do so without discussing the underlying reasoning, making it harder for less experienced researchers to learn and master these skills. Here, we introduce the concept of **analysis validation checks**, which frames these expectations or assumptions as explicit checks that return a TRUE or FALSE output given the data analyzed at hand. Inspired by the concept of data validation checks (@validate), which are designed to ensure that datasets meet expected formats and quality, analysis validation checks reverse the approach: they validate the assumptions about the data necessary for the analysis to produce the *expected results*. The focus on expected results allows the concept of analysis validation checks to encompass a broad range of checks, such as data quality (i.e. missing data, how the data are structured), data distribution and outliers, bivariate and multivariate relationships between variables, and other contextual information. These externalized checks provide insights into analysts' thought processes and offer the following benefits: 

  1. Serve as clear checkpoints to support the replication or application of methods to (new) data by programmatically communicating the requirements or assumptions made of the data;
  3. Align assumptions among researchers from different domain backgrounds who may have different expectations about the data;
  4. Improve analysis transparency, reproducibility, and trustworthiness by externalizing a key part of the analysis process; and
  5. Quantify the effectiveness of analysis checks for predicting the expected outcome (see @sec-method);
  
In addition to the above benefits, the development and publication of analysis checks has the potential to help students, inexperienced analysts, and junior researchers develop the skills needed to diagnose unexpected analysis results for a given type of data because the assumptions made about the data are made transparent. The analysis checks can serve as a basis for new analysts to have conversations about the data they are analyzing and to develop a better understanding of the potential data generation process.

## A toy example

Consider a 30-day step count experiment in public health. Testers are instructed to walk at least 8,000 steps each day, with an expected average of 9,000 steps, tracked by a step counter app. While there may be occasional "low" days due to factors such as forgetting to wear their watch or unfavorable weather condition limiting outdoor activities, there are also "high" days after an outdoor hike or intense workout. After 30 days, you review the data and expect no more than five days with step counts falling below the 8,000-step threshold [I think we need a bit more scenario to justify we expect no more than 5 days, say it needs to have at least 25 days for it to be valid for the next stage research??].

To simulation this data, three normal distributions are used for the daily step counts: $\mathcal{N}(4000, 200)$ for low days, $\mathcal{N}(12000, 200)$ for high days, and $\mathcal{N}(9000, 300)$ for typical days. The number of low and high days can be simulated from a Poisson distribution with $\lambda = 4$. @fig-step-count displays the number of days with fewer than 8,000 steps across 300 simulated 30-day periods.

In this scenario, the outcome is that the number of days with a step count below 8,000 being no more than five. To diagnose potential reasons why this outcome expectation might fail, we can establish a few analysis validation checks. For example, if the average step count is too low, this may suggest there are too many low days, potentially lead to the unexpected outcome. Similarly, we can also check the quantile of the step count, if more than a third of the days fall below 8,000, this could indicate an excess of low-count days. Additionally, we may may expect the standard deviation of the step count not to be overly large. These considerations yield the following three unit tests as plan expectations:

-   test1: the test fails if the mean step count is below 8,200
-   test2: the test fails if the 30th percentile of the step counts is below 8,200
-   test3: the test fails if the standard deviation of the step counts exceeds 2,500.

```{r}
#| label: fig-step-count
#| fig-cap: Number of days with fewer than 8,000 steps across 300 simulated 30-day periods. The orange bars indicate instances where the count exceeds five days, representing an unexpected outcome in this scenario. 
set.seed(1234)
step_count <- tibble(id = 1:300) |> 
  rowwise() |> 
  mutate(
    small_n = rpois(1, 4),
    large_n = rpois(1, 4),
    norm_sd = rlogis(1, 800, scale = 100),
    norm_n = 30 - small_n - large_n,
    step = list(round(c(rnorm(small_n, 4000, 200), 
                        rnorm(large_n, 12000, 200), 
                        rnorm(norm_n, 9000, 300)
                        ), 0)),
    less_than_8000 = sum(step < 8000), 
    unexpect = ifelse(less_than_8000 > 5, 1, 0),
    test1 = ifelse(mean(step) < 8200, 1, 0),
    test2 = ifelse(quantile(step, 0.3, na.rm = TRUE) < 8300, 1, 0),
    test3 = ifelse(sd(step) > 2500, 1, 0),
    ) |>
  ungroup()

# step_count |> 
#   dplyr::select(id, step) |> 
#   unnest(step) |>
#   mutate(day = rep(1:30, 300)) |> 
#   ggplot(aes(x = step, y = id)) + 
#   geom_point(alpha = 0.5) + 
#   theme_bw()

step_count |> 
  ggplot(aes(x = less_than_8000, fill = as.factor(unexpect))) + 
  geom_histogram(binwidth = 0.5) + 
  scale_x_continuous(breaks = seq(0, 13, 1)) +
  scale_fill_brewer(palette = "Dark2") + 
  xlab("Number of days with step count less than 8000") + 
  theme_bw() + 
  theme(legend.position = "none")
```

# Method {#sec-method}

## A workflow to assess the quality of unit tests

While some checks are crucial and can lead to unexpected outcomes, others may be tangential to the root cause. In this section, we propose a procedure to measure the violation of checks, combined using logical operators, contribute to an unexpected outcome. A small set of independent checks is considered effective if it translates to unexpected outcomes and @fig-metric-calc provides an overview of the calculation. 

```{r}
#| label: fig-metric-calc
#| fig-cap: "[this is the cap and the plot needs polish]"
knitr::include_graphics(here::here("figures", "metric-calc.png"))
```

From the simulated data, the accuracy branch refers to a set of checks' ability to accurately detect unexpected outcomes while minimizing false positives and false negatives. While a false positive can raise caution or skepticism on the data, both false positive and false negative suggest the checks are over or lack sensitivity to unexpected outcomes. To incorporate the effect of multiple checks on the outcome, a logic regression model [@ruczinski_logic_2003] is fitted to the checks and whether the outcome is unexpected. Originally developed for SNP microarray data, logic regression constructs Boolean combinations of binary variables, in a tree structure, to predict both binary and numerical outcomes. Compared to other tree-based methods for binary-binary prediction, the Boolean combinations from the logic regression model produce a tree structure that can be directly interpreted as the possible combination of checks leading to an unexpected outcome, without the need to invert the tree as required in classic tree-based methods. The model is then used to predict the outcome expectation based on the checks, and the prediction is compared to the actual outcome expectation to calculate the precision and recall of the checks. 

<!-- -   precision: the proportion of correctly identified unexpected results (true positives) out of all the predicted unexpected results (true positives + false positives) -->
<!-- -   recall: the proportion of correctly identified unexpected results (true positives) out of all the actual unexpected results (true positives + false negatives) -->

While tests may score high on accuracy, they may be less effective at explaining the reasons behind unexpected results. This could happen if a set of tests are all tangentially related to the cause of the unexpected results, but none addressing the root cause. It may also occur if the tests are correlated with one another, leading to redundancy.

To quantify redundancy, the concept of mutual information is used. Mutual information $I(x, y)$ measures the amount of information shared between two random variables and is defined as the KL-distance $D(p \parallel q)$ between the joint distribution of the two variables and the product of the marginal distributions:

$$I(x,y) = D\big(p(x,y) \parallel p(x)p(y)\big) = \sum_x \sum_y p(x,y) \log \frac{p(x,y)}{p(x)p(y)}$$

This concept extends naturally to multiple variables through total correlation, $C(X_1, X_2, \cdots, X_n)$, which captures redundancy across a set of $n$ variables:

$$C(X_1, X_2, \cdots, X_n) = \sum_{x_1} \sum_{x_2} \cdots \sum_{x_n} p(x_1, x_2, \cdots, x_n) \log \frac{p(x_1, x_2, \cdots, x_n)}{p(x_1)p(x_2) \cdots p(x_n)}$$

A high mutual information value indicates redundancy among the tests, while a low value suggests that the tests are independent and provides unique information to diagnose the unexpected outcome. To standardize this measure, the total correlation *per observation* is calculated, and an independence score, ranging between 0 and 1, is defined as 1 - mutual information.

To combine precision, recall, and independence into a single metric, mathematical means, such as arithmetic mean, harmonic mean, and quadratic mean can be used. The differences among these means are minimal when the three metrics are similar. However, as the differences among the metrics increases, the harmonic mean tends to produce the smallest overall score, as it penalizes low values, while the quadratic mean tends to produce the largest score by rewarding higher values more. For simple interpretation of the score, the arithmetic mean is preferred, while in applications where the difference between precision, recall, and independence need to be penalized or rewarded more, the harmonic and quadratic mean should be considered.

## Toy example revisited

```{r}
#| label: fig-logic-reg
#| fig.width: 6
#| fig.heigh: 2
#| fig-cap: Logic regression model fitted to the three unit tests (test1, test2, test3). The model suggests using an OR rule to combine test1 and test3 to predict the outcome expectation.
fit <- step_count |> fit_logic_reg(unexpect, test1:test3, seed = 1, nleaves = 4)
plot_logicreg(fit)
```

```{r}
fit_regtree <- rpart(unexpect ~ ., data = step_count |> dplyr::select(unexpect:test3), method = "class", 
                     control = rpart.control(cp = 0.01)) 
pred_vec <- predict(fit_regtree) |> as_tibble() |> mutate(.fitted = ifelse(`0` > `1`, 0, 1)) |> dplyr::select(.fitted)
regtree_df <- step_count |> dplyr::select(unexpect) |> bind_cols(pred_vec) |> 
  calc_miscla_rate(unexpect, .fitted) |> 
  mutate(overlapping = multiinformation(step_count[,c(9, 11)])/nrow(step_count), 
         independence = 1 - overlapping) |> 
  calc_metrics(metrics = c("harmonic", "arithmetic"))
```

```{r}
#| label: tbl-logic-reg
list(tibble(.fitted = step_count$test1, unexpect = step_count$unexpect),
     tibble(.fitted = step_count$test2, unexpect = step_count$unexpect),
     tibble(.fitted = step_count$test3, unexpect = step_count$unexpect)
) |>
  map_dfr(~.x |> calc_miscla_rate(unexpect, .fitted) |> 
            mutate(independence = 1) |> 
            calc_metrics(metrics = c("harmonic", "arithmetic")), .id = "tests") |> 
  mutate(tests = c("test1", "test2", "test3")) |>
  bind_rows(augment(fit) |> 
              calc_miscla_rate(unexpect, .fitted) |> 
              calc_independence() |> 
              calc_metrics(metrics = c("harmonic", "arithmetic")) |> 
              mutate(tests = "test1 OR test3") |> 
              dplyr::select(-overlapping)) |> 
  bind_rows(regtree_df |> 
              dplyr::select(-overlapping) |> 
              mutate(tests = "regression tree")) |>
  kable(digits = 3, 
        caption = "Accuracy (precision and recall) and parsimony (independence) metrics for each individual unit test and for the combined test rule (test1 OR test3) derived from the logic regression model. The harmonic and arithmetic means of the three metrics are included to evaluate the quality of the unit tests in  diagnosing unexpected step counts (more than five days with fewer than 8,000 steps).")
```

In the step count example, the logic regression model is fitted to the three unit tests to generate the prediction for calculating precision and recall. @fig-logic-reg shows the chosen logic regression model: a combination of test 1 and test 3 with an OR operator and @tbl-logic-reg presents the calculated precision, recall, and independence for the three individual tests and the combined test rule (test1 OR test3) from the logic regression. We also include the metric calculated from fitting a regression tree model to the data to compare the performance of the logic regression model. The harmonic and arithmetic means are included to combine the three measures. The results show that the two tests produced by the logic regression can accurately predict 82.1% of all *predicted unexpected cases*, and 83.6% cases of all *actual unexpected results* in the simulation data. The regression tree produces a similar model of first split on test1 and then split on test3, and results in the same accuracy and overall score as the logic regression model.

<!-- * provide interpretation at different scenarios: -->

<!--   1) one test is flagged, the prediction is as expected:  --> <!--   2) multiple tests are flagged, the prediction is unexpected,  --> <!--   3) no test is flagged, the prediction is unexpected,  --> <!--   4) no test is flagged, the prediction is as expected -->

# Application {#sec-pm10-mortality}


Consider a generalized linear model (GLM) to study the effect of PM10 on mortality [TODO: provide more context of the mortality-PM10 study]. Analysts may expect a PM10 coefficient between [0, 0.005] after considering the temperature confounding [TODO: reference]. The example demonstrates how the procedure presented in @sec-method can be used to select cutoff values in the checks to diagnose an unexpected PM10 coefficient from the generalized linear model. 

This PM10 coefficient expectation can be framed into a check that fails, labelled as 1, if the PM10 coefficient is outside the range [0, 0.005] and 0 if it is within. Multiple factors can affect the PM10 coefficient, such as the sample size, the strength of the correlation between mortality and PM10, and the strength of the correlation between mortality and temperature. Analysts may expect a reasonable sample size to ensure the reliability of the coefficient estimate. Outliers in the three variables can also leverage the coefficient. While these are possible factors that could affect the analysis result, it is not clear the cutoff values for these checks to determine a failure. Here we create a list of checks in @tbl-checks with varied cutoff values for each: 

| the check fails if ... | 
|--------------| 
| Sample size less than or equal to 200 |
| Sample size less than or equal to 400 |
| Sample size less than or equal to 600 |
| Sample size less than or equal to 800 |
| Mortality-PM10 correlation less than -0.03 |
| Mortality-PM10 correlation less than -0.04 |
| Mortality-PM10 correlation less than -0.05 |
| Mortality-PM10 correlation less than -0.06 |
| Mortality-temperature correlation greater than -0.3 | 
| Mortality-temperature correlation greater than -0.35 | 
| Mortality-temperature correlation greater than -0.4 | 
| Mortality-temperature correlation greater than -0.45 | 
| Outlier(s) are presented in the variable PM10 | 
| Outlier(s) are presented in the variable mortality | 

: A list of checks considered for the generalized linear model of mortality on PM10 and temperature. The checks are based on the sample size, correlation between mortality and PM10, correlation between mortality and temperature, and univariate outlier detection. Multiple cutoff values are specified for each check to determine a failure. {#tbl-checks} 

To generate replicate of the data, we first simulate the correlation matrix of the three variables in a grid and then use a Gaussian copula to generate a multivariate normal distribution based on the specified correlation matrix and sample size. The multivariate normal distribution is transformed using the normal CDF before the inverse CDF of the assumed distributions of the three variables is applied. To determine the appropriate distribution of each variable, various distributions are fitted and compared. This includes poisson and negative binomial for mortality; gamma, log-normal, exponential, weibull, and normal for pm10 and temperature; and beta for pm10 after rescaling the data to $[0-1]$. AIC is used to determine the best distribution fit for each variable with qq plot presented in @fig-dist-fit to evaluate the fit. AIC suggests a negative binomial distribution for mortality, a beta distribution for PM10 (multiple by 100 to obtain the original scale), and a Weibull distribution for temperature. To include the effect of outlier, we add a single outlier to the data for both variable mortality and PM10.

```{r}
#| label: fig-dist-fit
#| fig-cap: QQ-plot of the distribution fit for mortality, PM10, and temperature based on the fitted distribution from the original data. The fitted distribution is compared to the observed data to assess the distribution fit. 
#| fig.height: 4
#| fig.width: 10
aa2 <- fitdistrplus::fitdist(pm10$mortality, "nbinom")
p1 <- tibble(fitted= rnbinom(558, size = aa2$estimate[1], mu = aa2$estimate[2]),
       observed= pm10$mortality) %>%
  ggplot(aes(sample = fitted)) +
  stat_qq() +
  stat_qq_line() + 
  theme_bw() + 
  theme(aspect.ratio = 1) + 
  ggtitle("mortality: \nNB(size = 74, mu = 183)")


aa6 <- fitdistrplus::fitdist(pm10$pm10[pm10$pm10 < 90]/100, "beta")
p2 <- tibble(fitted = rbeta(557, shape1 = aa6$estimate[1], shape2 = aa6$estimate[2]) * 100,
       observed = pm10$pm10[pm10$pm10 < 90]) %>%
  ggplot(aes(sample = fitted)) +
  stat_qq() +
  stat_qq_line() + 
  theme_bw() + 
  theme(aspect.ratio = 1) + 
  ggtitle("pm10: \n100 * beta(shp1 = 4.21, shp2 = 11.67)")
  

aa4 <- fitdistrplus::fitdist(pm10$temp, "weibull")
p3 <- tibble(fitted= rweibull(558, aa4$estimate[1], aa4$estimate[2]),
       observed= pm10$temp) %>%
  ggplot(aes(sample = fitted)) +
  stat_qq() +
  stat_qq_line() + 
  theme_bw() + 
  theme(aspect.ratio = 1) + 
  ggtitle("temperature: \nweibull(shape = 3.8, scale = 61)")

p1 | p2 | p3
```

```{r}
# cor(pm10$pm10, pm10$mortality)
# cor(pm10$temp, pm10$mortality)
# cor(pm10$temp, pm10$pm10)
corr_grid <- expand.grid(seq(0.01, 0.2, by = 0.02),                         
                         seq(0.25, 0.5, by = 0.05),                           
                         seq(0.25, 0.45, by = 0.05))  

gen_corr_mtx <- function(r1, r2, r3) {   
  # correlation between mortality and pm10 are negative - r1
  # correlation between mortality and temp are negative - r2
  cor_matrix <- matrix(c(1, -r1, -r2,                          
                         -r1, 1, r3,                          
                         -r2, r3, 1), nrow = 3, byrow = TRUE)          
  if (all(eigen(cor_matrix)$values > 0)) return(cor_matrix) 
  }  

corr_mtx <- lapply(1:nrow(corr_grid), function(i) {   
  gen_corr_mtx(corr_grid[i, 1], corr_grid[i, 2], corr_grid[i, 3]) }) 
corr_mtx <- corr_mtx[map_lgl(corr_mtx, ~!is.null(.x))]  
sample_size <- c(200, 400, 600, 800, 1000)
outlier <- c(TRUE, FALSE)  

generate_data <- function(n, mtx, seed = 123, outlier = FALSE) {   
  mu <- c(0, 0, 0)   
  set.seed(seed)  
  data <- mvrnorm(n, mu, mtx, empirical = TRUE)   
  U <- pnorm(data, mean = 0, sd = 1)   
  
  if (!outlier) {
   tibble(mortality = qnbinom(U[,1], size = 74, mu = 183),           
         pm10 = qbeta(U[,2], shape1 = 4.21, shape2 = 11.67) * 100,           
         temp = qweibull(U[,3], shape = 3.8, scale = 61))    
  } else{
    pm10_vec <- qbeta(U[,2], shape1 = 4.21, shape2 = 11.67) * 100
    tibble(
      mortality = c(qnbinom(U[,1], size = 74, mu = 183)[-1],
                    rnorm(n = 1, mean = 300, sd = 10)),           
      pm10 = c(pm10_vec[-1], rnorm(n = 1, mean = 100, sd = 10)),           
      temp = qweibull(U[,3], shape = 3.8, scale = 61)
      )    
  }
  
}

res <- tibble(corr_mtx = corr_mtx) |> 
  mutate(id = row_number()) |> 
  crossing(sample_size, outlier) |> 
  rowwise() |>   
  mutate(data = list(generate_data(n = sample_size, mtx = corr_mtx, outlier = outlier)),          
         fit = list(summary(glm(mortality ~ pm10 + temp, family = "poisson", data))$coefficients))  

pm10_df <- res |>   
  mutate(     
    p_value = fit[2,4],     
    coef = fit[2,1],     
    mor_pm10_correlation = corr_mtx[1, 2],     
    mor_temp_correlation = corr_mtx[1, 3],     
    temp_pm10_yz_correlation = corr_mtx[2, 3],     
    unexpect = ifelse(between(coef, 0, 0.005), 0, 1),
    `smpl_size <= 200` = ifelse(sample_size <= 200, 1, 0),
    `smpl_size <= 400` = ifelse(sample_size <= 400, 1, 0),
    `smpl_size <= 600` = ifelse(sample_size <= 600, 1, 0),
    `smpl_size <= 800` = ifelse(sample_size <= 800, 1, 0),
    `cor(m, PM10) < -0.03` = ifelse(mor_pm10_correlation < -0.03, 1, 0),
    `cor(m, PM10) < -0.04` = ifelse(mor_pm10_correlation < -0.04, 1, 0),
    `cor(m, PM10) < -0.05` = ifelse(mor_pm10_correlation < -0.05, 1, 0),
    `cor(m, PM10) < -0.06` = ifelse(mor_pm10_correlation < -0.06, 1, 0),
    `cor(m, tmp) > -0.3` = ifelse(mor_temp_correlation > -0.3, 1, 0),
    `cor(m, tmp) > -0.35` = ifelse(mor_temp_correlation > -0.35, 1, 0),
    `cor(m, tmp) > -0.4` = ifelse(mor_temp_correlation > -0.4, 1, 0),
    `cor(m, tmp) > -0.45` = ifelse(mor_temp_correlation > -0.45, 1, 0)
  ) |>    
  ungroup() 

pm10_df <- pm10_df |> 
  rowwise() |> 
  mutate(`PM10 outlier` = ifelse(any(scale(data$pm10) > 4), 1, 0),
         `mortality_outlier` = ifelse(any(scale(data$mortality) > 4), 1, 0)
         ) |> 
  ungroup()
```

::: {#fig-linear-reg-tree}

```{r}
#| fig.width: 8
#| fig.heigh: 3
fit <- pm10_df |> fit_logic_reg(unexpect, `smpl_size <= 200`:`mortality_outlier`, 
                                seed = 6, nleaves = 4)
plot(fit) 
```

Logic regression model fitted to the fourteen unit tests and the outcome expectation (unexpected) as the response variable. The model suggests the relationship:
(sample size *greater than* 200 AND mortality-PM10 correlation < -0.04) AND (mortality-temperature correlation > -0.35 OR there exist mortality outlier) to predict the unexpected PM10 coefficient. [sorry the proper plot is not ready].
:::

```{r}
#| label: tbl-linear-reg
library(kableExtra)
df <- list(
  tibble(.fitted = pm10_df$`smpl_size <= 200`, 
         unexpect = pm10_df$unexpect),
  tibble(.fitted = pm10_df$`cor(m, PM10) < -0.03`, 
         unexpect = pm10_df$unexpect),
  tibble(.fitted = pm10_df$`cor(m, tmp) > -0.35`, 
         unexpect = pm10_df$unexpect),
  tibble(.fitted = pm10_df$mortality_outlier, 
         unexpect = pm10_df$unexpect),
  augment(fit)) |>
  map_dfr(~.x |> calc_miscla_rate(unexpect, .fitted) |> 
            mutate(overlapping = 0, independence = 1) |> 
            calc_metrics(metrics = c("harmonic", "arithmetic")), .id = "id") 

tbl <- tibble(tests = c(1,2,3,4, 5)) |> bind_cols(df |> dplyr::select(-id)) 
tbl |> 
  kable(digits = 3, escape = FALSE,
        caption = "Accuracy (precision and recall) and parsimony (independence) metrics derived from the logic regression model, along with harmonic and arithmetic means, for individual unit tests (1: sample size, 2: mortality-PM10 correlation, 3: mortality-temperature correlation,  4: mortality outlier), and the combined test rule 5: (sample size AND mortality-PM10 correlation) AND (mortality-temperature correlation OR mortality outlier.") 

```

A logic regression is fitted to predict whether the PM10 coefficient is unexpected using the checks listed in @tbl-checks and @fig-linear-reg-tree shows the logic regression tree from the fitted model. Precision, recall, and independence score, along with their harmonic and arithmetic mean are calculated in  @tbl-linear-reg. The logic regression model picks up the following cutoff value for each type of check:

-   sample size *larger than* 200
-   mortality-temperature correlation greater than -0.35
-   mortality-PM10 correlation less than -0.04
-   mortality contain outliers that are detected by the univariate outlier detection

<!-- (mortality-temperature correlation > -0.35 OR there exist mortality outlier) and (mortality-PM10 correlation < -0.04 AND (not sample size less than 200) )  -->

The tree structure suggests checking mortality-PM10 correlation and a sample size larger than 200 with an additional check of either outlier on mortality or correlation between mortality and temperature. This combined check rule generates a precision of `r round(as.numeric(df[5, "precision"]), 3)` and a recall of `r round(as.numeric(df[5, "recall"]), 3)` for predicting the unexpected PM10 coefficient. The single check, `cor(m, PM10) < -0.03`, is also powerful with a high precision of `r round(as.numeric(df[2, "precision"]), 3)`, but the low recall value of `r round(as.numeric(df[2, "recall"]), 3)` suggests its high false positive rate, as compared to the combined rule suggested by the logic regression.

# Discussion {#sec-discussion}

TODO

-   how to systematically simulate data is still unknown

-   plotting is a critical way to check data and they can still be frame into checks. i.e. the density/ histogram suggests there are outliers. It is a open problem to how to encode the visualization into checks. 

-   currently no automated way to generate checks. It is interesting to see how check generation can be automated, although it requires the inputs from experts across a wide array of common scenarios.

- checks are also closely related to the concept of unit tests in software engineering. While unit tests are designed to isolate and test specific aspects of the code, it is difficult for analysis validation check to do so.

-   There are cost and benefit on setting expectation on different granularity. At the lowest level, one may have a plan for each data entry and every data handling steps. This requires more work from the analysts and may not be practical in practice. For more complex analyses, analysts may divide the analysis into sections and set expectations for each. They can then focus on the specific sections flagged by the tests and sub-divide the sections to set expectation and diagnose the analysis in a hierarchical manner.


# Conclusion {#sec-conclusion}

TODO

# Acknowledgement

The article is created using Quarto [@Allaire_Quarto_2022] in R [@R].
The source code for reproducing the work reported in this paper can be
found at: <https://github.com/huizezhang-sherry/paper-avc>. 

# References
