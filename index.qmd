---
title: "My wonderful paper"
abstract: "In data analysis, unexpected results often prompt researchers to revisit their procedures to identify potential issues. While experienced researchers can typically diagnose problems by checking a few key assumptions, others may struggle to identify the root causes. These checked assumptions, or expectations, are typically informal, difficult to trace, and rarely discussed in publications. In this paper, we formalize these informal assumptions by framing them as binary *analysis validation check*. We then introduce a procedure to quantify how violations of these checks may lead to unexpected results in the analysis. The procedure relies on simulations of the original data and evaluates boht accuracy and redundancy. Accuracy is calculated through binary classification metric, while redundancy is measured using mutual information. We demonstrate this approach with a toy example on the fitness step count data and a generalized linear model exmaple examining the effect of PM10 on mortality. "
author:
  - name: H. Sherry Zhang
    email: huize.zhang@austin.utexas.edu
    affiliations: 
        - id: 1
          name: University of Texas at Austin
          department: Department of Statistics and Data Sciences
          city: Texas
          country: United States
          postal-code: 78705
    attributes:
        corresponding: true
  - name: Roger D. Peng
    email: roger.peng@austin.utexas.edu
    affiliations: 
        - id: 1
          name: University of Texas at Austin
          department: Department of Statistics and Data Sciences
          city: Texas
          country: United States
          postal-code: 78705
cite-method: natbib
bibliography: references.bib
format:
 tandf-pdf:
   keep-tex: true
   fontsize: 12pt
   linestretch: 2
   notebook-links: false
preamble: >
  \usepackage{amsfonts,amsmath,amssymb,amsthm}
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(patchwork)
library(MASS)
library(ggh4x)
library(adtoolbox)
library(broom)
library(knitr)
library(rpart)
library(infotheo)
pm10 <- read_csv(here::here("data", "pm10.csv")) |> 
  filter(!is.na(pm10)) |>    
  mutate(season = as.factor(season))  
```


README: 

* *Check for TODOs*
- Literature review: Section *diagnosing unexpected outcomes in data analysis* 
- *Discussion* and *Conclusion*
- In Section *Application*: provide more context on the PM10-mortality study and add reference of the [0, 0.005] PM10 coefficient

\newpage

# Introduction

-   TODO: emphasize trustworthy data science since it is the theme of the special issue

In data analysis, experienced researchers often rely on their prior knowledge or domain expertise to quickly assess whether results align with their expectations. When a result falls outside of this interval, it prompts the researchers to investigate backwards on the data quality, the analysis steps, or the assumptions made during the analysis process. This mental process of where to diagnose unexpected outcomes is often difficult to trace and discuss in publications. As a result, readers are typically presented with the final outcomes of the analysis cycle where the results and expectations are aligned -- achieved either by refining the analysis or updating the expectations based on statistical evidence [@grolemund_cognitive_2014]. These missing pieces of information provides little guidance for diagnosing issues in the analysis when the same methodology is applied to a new dataset that produces different outcomes. Similarly, when researchers with different background knowledge it becomes unclear whether discrepancies arise from differing expectations or from the use of statistical techniques.

One might gain insight into analysts' thought process by speaking with them directly or watching screencast videos they produce, such as, TidyTuesday screencast videos. However, direct conversation are not scalable and may not be feasible while creating educational videos requires significant effort from the researchers. Ideally, there could be a way to make these expectations explicit and accessible to others. Even better, if the encoding is machine-readable, we could analyze these expectations and learn from the analysis -- whether the checks also apply to other researchers analyzing new data in the same context, whether they reflect commo common practices in the field, or whether they are specific to the data or analysis at hand. 

In this paper, we conceptualize these internal expectations and assumptions as *analysis validation checks*, which allows us to examine these assumptions made during analysis to diagnose unexpected outcomes. We then introduce a procedure that provides a quantitative emasure on how violations in a tree of checks, derived from individual checks, will lead to an unexpected result. The procedure, based on simulations of the original data, calculates accuracy and redundancy. Accuracy is determined using binary classification metrics, precision and recall, from a logic regression fit while redundancy is measured using mutual information. The proposed workflow offers a numerical guarantee that the analysis will produce the expected results, assuming the data generating mechanism holds. [something about trustworthy data science]

The rest of the paper is organized as follows: @sec-lit-review reviews the concept of diagnosing unexpected outcomes and data quality checks. @sec-plan introduces the concept of analysis validation check, illustrated with a toy example on fitness step count. @sec-method describes the procedure that quantify how checks combined in logical operators can predict unexpected outcomes. @sec-pm10-mortality applies this procedure to examine the effect of PM10 on mortality in public health in a generalized linear model. @sec-discussion discusses a few key considerations and @sec-conclusion concludes the paper.

# Literature review {#sec-lit-review}

## Diagnosing unexpected outcomes in data analysis

* They shape how we interpret the results and assess whether they are consistent with existing knowledge or indicate the need for updates. [@grolemund_cognitive_2014]

* [@peng_diagnosing_2021] describes three pedagogical exercises of introducing diagnosing unexpected outcome into a classroom setting.

* what if the expectation is "wrong"

## Data analysis checks 

A substantial body of literature has addressed the definition of data quality [@8642813, more] and developed frameworks, that includes dimensions, attributes, and measures to evaluate and improve data quality [@cai2015challenges; @wang1996beyond; @6204995; @woodall2014classification]. These frameworks are often used information system and database management and support business decision-making in the industry. For research purposes, high-quality data ensures the credibility of scientific findings and supports reproducibility and reusability in future studies [ref]. With the growing prevalence of open data in scientific research, the consumers or users of the data typically are no longer the data producers or collectors who have the full knowledge of data in hand, prompting more interest towards the data quality checks in the data analysis process. In R, there are some packages, like `skimr` [@skimr] and `dataMaid` [@dataMaid], provides basic data screening and reporting, while another class of packages, e.g. `assertr` [@assertr], `validate` [@validate], and `pointblank` [@pointblank] focuses on providing data validation tools, allowing users to define customized data quality checks based on the applications. 

# Analysis validation checks {#sec-plan}

## Framing expectations as checks

Expectations represent our beliefs about certain aspects of the analysis, independent of the analysis itself. When outcomes deviate from these expectations, analysts often revisit the analysis cycle to identify potential issues, refine methods, or revise assumptions. Experienced analysts can typically identify issues quickly and correct them on the spot, but they often do so without discussing the underlying reasoning, making it harder for less experienced researchers to learn and master these skills. Here, we introduce the concept of *analysis validation checks*, which frames these expectations or assumptions as explicit checks that returns a TRUE or FALSE output given the data analyzed at hand. Inspired by data validation checks [ @validate], where ensure datasets meet expected format and quality, analysis validation checks reverse the approach: they validate the assumptions about the data necessary for the analysis to produce the reported results. This allows the concept to encompass a broad range of checks, such as data quality (i.e. missing data, how the data is structured), data distribution and outliers, bivariate and multivariate relationships between variables, and contextual information. These externalized checks provide insights into analysts' thoughts process process and offer several benefits: 

  1) help students and junior researchers develop skills to diagnose unexpected analysis results, 
  2) serve as clear checkpoints to support replication or application of methods to (new) data,
  3) align assumptions among researchers from different domain backgrounds, and 
  4) improve analysis transparency, reproducibility, and trustworthiness.

## A toy example

Consider a 30-day step count goal. Suppose you resolve to walk at least 8,000 steps each day, using an app to record your daily step count. Your target average is 9,000 steps per day, with some "lows" day, where you walk around 4,000 steps and "high" days where you reach about 12,000 steps. After 30 days, you check how many times your step count fall below 8,000 and aim for no more than five days under this threshold.

To simulation this data, three normal distributions with different means are used for the daily step counts: $\mathcal{N}(4000, 200)$ for low days, $\mathcal{N}(12000, 200)$ for high days, and $\mathcal{N}(9000, 300)$ for typical days. The number of low and high days can be simulated from a Poisson distribution with $\lambda = 4$. @fig-step-count displays the number of days with fewer than 8,000 steps across 300 simulated 30-day periods.

In this scenario, the outcome expectation is that the number of days with a step count below 8,000 will be no more than five. To diagnose potential reasons why this outcome expectation might fail, we can establish a few plan expectations. For example, if the average step count is too low, this may suggest there are too many low days, potentially lead to an unexpected outcome. Similarly, we can also check the quantile of the step count, if more than a third of the days fall below 8,000, this could indicate an excess of low-count days. Additionally, we may may expect the standard deviation of the step count not to be overly large.

TODO: add one or two scenarios on why step count could go up or down: 1) you take off your watch in the middle of the day, 2) have an workout

TODO: phrase it as Researcher measuring someone's step count rather than measuring your own step count

These considerations yield the following three unit tests as plan expectations:

-   test1: the test fails if the mean step count is below 8,200
-   test2: the test fails if the 30th percentile of the step counts is below 8,200
-   test3: the test fails if the standard deviation of the step countsexceeds 2,500.

```{r}
#| label: fig-step-count
#| fig-cap: Number of days with fewer than 8,000 steps across 300 simulated 30-day periods. The orange bars indicate instances where the count exeeds five days, representing an unexpected outcome in this scenario. 
set.seed(1234)
step_count <- tibble(id = 1:300) |> 
  rowwise() |> 
  mutate(
    small_n = rpois(1, 4),
    large_n = rpois(1, 4),
    norm_sd = rlogis(1, 800, scale = 100),
    norm_n = 30 - small_n - large_n,
    step = list(round(c(rnorm(small_n, 4000, 200), 
                        rnorm(large_n, 12000, 200), 
                        rnorm(norm_n, 9000, 300)
                        ), 0)),
    less_than_8000 = sum(step < 8000), 
    unexpect = ifelse(less_than_8000 > 5, 1, 0),
    test1 = ifelse(mean(step) < 8200, 1, 0),
    test2 = ifelse(quantile(step, 0.3, na.rm = TRUE) < 8300, 1, 0),
    test3 = ifelse(sd(step) > 2500, 1, 0),
    ) |>
  ungroup()

# step_count |> 
#   dplyr::select(id, step) |> 
#   unnest(step) |>
#   mutate(day = rep(1:30, 300)) |> 
#   ggplot(aes(x = step, y = id)) + 
#   geom_point(alpha = 0.5) + 
#   theme_bw()

step_count |> 
  ggplot(aes(x = less_than_8000, fill = as.factor(unexpect))) + 
  geom_histogram(binwidth = 0.5) + 
  scale_x_continuous(breaks = seq(0, 13, 1)) +
  scale_fill_brewer(palette = "Dark2") + 
  xlab("Number of days with step count less than 8000") + 
  theme_bw() + 
  theme(legend.position = "none")
```

# Method {#sec-method}

## A workflow to assess the quality of unit tests

In real-world applications, it is rare to create a set of unit tests can fully guarantee expected results. On one hand, there is the cost of effort involved in manually developing all these tests; on the other, there is the inherent complexity of the problem. (can we - if we're thriving for detecting 95% of the cause?). However, the quality of unit tests can be evaluated by simulated data. One set of tests is considered better than another if a small set of tests can reliably detect unexpected outcomes, which brings two criteria in the evaluation metric: accuracy and parsimony. @fig-metric-calc illustrates the workflow for calculating the metrics.

```{r}
#| label: fig-metric-calc
#| fig-cap: "this is the cap"
knitr::include_graphics(here::here("figures", "metric-calc.png"))
```

Accuracy refers to a set of tests' ability to accurately detect unexpected outcomes while minimizing false positives and false negatives. A false positive can indicate (caution or skepticism on checking the data), whereas a false negative suggests the tests may lack sensitivity to unexpected outcomes. To model the relationship between the plan and outcome expectation (binary-binary), a logic regression model is used [@ruczinski_logic_2003]. Originally developed for SNP microarray data, logic regression constructs Boolean combinations of binary variables to solve regression problems \[more introduction on logic regression\]. Compared to other tree-based methods or machine learning methods for binary-binary prediction, logic regression produces Boolean combinations, or meta rules, that combines unit tests to solve the prediction problem. \[need rewrite here\]. The performance of the tests can be evaluated using precision and recall metrics derived from the confusion matrix of the logic regression prediction

-   precision: the proportion of correctly identified unexpected results (true positives) out of all the predicted unexpected results (true positives + false positives)
-   recall: the proportion of correctly identified unexpected results (true positives) out of all the actual unexpected results (true positives + false negatives)

The second criteria is parsimony in the tests. While tests may score high on accuracy, they may be less effective at explaining the reasons behind unexpected results. This could happen if a set of tests are all tangentially related to the cause of the unexpected results, but none addressing the root cause. It may also occur if the tests are correlated with one another, leading to redundancy.

To quantify redundancy, the concept of mutual information is used. Mutual information $I(x, y)$ measures the amount of information shared between two random variables and is defined as the KL-distance $D(p \parallel q)$ between the joint distribution of the two variables and the product of the marginal distributions:

$$I(x,y) = D\big(p(x,y) \parallel p(x)p(y)\big) = \sum_x \sum_y p(x,y) \log \frac{p(x,y)}{p(x)p(y)}$$

This concept extends naturally to multiple variables through total correlation \[ref\], $C(X_1, X_2, \cdots, X_n)$, which captures redundancy across a set of $n$ variables:

$$C(X_1, X_2, \cdots, X_n) = \sum_{x_1} \sum_{x_2} \cdots \sum_{x_n} p(x_1, x_2, \cdots, x_n) \log \frac{p(x_1, x_2, \cdots, x_n)}{p(x_1)p(x_2) \cdots p(x_n)}$$

A high mutual information value indicates redundancy among the tests, while a low value suggests that the tests are independent and provide unique information to diagnose the unexpected outcome. To standardize this measure, the total correlation *per observation* is calculated, and an independence score, ranging between 0 and 1, is defined as 1 - mutual information.

To combine precision, recall, and independence into a single metric, various mathematical means, such as arithmetic mean, harmonic mean, and quadratic mean, can be used. The differences among these means are minimal when the three metrics are similar. However, as the differences among the metrics increases, the harmonic mean tends to produce the smallest overall score, as it penalizes low values, while the quadratic mean tends to produce the largest score by rewarding higher values more. For simple interpretation of the score, the arithmetic mean is preferred, while in applications where the difference between precision, recall, and independence need to be penalized or rewarded more, the harmonic and quadratic mean should be considered.

## Toy example revisited

In the step count example, we can use the logic regression model to evaluate the quality of the unit tests. The logic regression model is fitted to the three unit tests (test1, test2, test3) and the outcome expectation (unexpect) as the response variable. The model is then used to predict the outcome expectation based on the unit tests. The prediction is then compared to the actual outcome expectation to calculate the precision and recall of the tests. The independence of the tests is also calculated to assess the redundancy of the tests. @fig-logic-reg presents the suggested logic regression model as a combination of test 1 and test 3 with an OR operator.

@tbl-logic-reg presents the calculated precision, recall, and independence for the three individual tests and the combined test rule (test1 OR test3) from the logic regression. The harmonic and arithmetic means are included to evaluate the quality of the unit tests in diagnosing unexpected step counts. The results show that the combined test rule (test1 OR test3) has the highest precision, recall, and independence, suggesting that it is the most effective test for diagnosing unexpected step counts. We also include the metric calculated from fitting a regression tree model to the data to compare the performance of the logic regression model. The regression tree produces a similar model of first split on test1 and then split on test3, and results in the same accuracy and overall score as the logic regression model.

top-down and bottom up (regression tree + logic tree): more naturally useful summary of the say it is organized. (put down the plot)

<!-- * provide interpretation at different scenarios: -->

<!--   1) one test is flagged, the prediction is as expected:  --> <!--   2) multiple tests are flagged, the prediction is unexpected,  --> <!--   3) no test is flagged, the prediction is unexpected,  --> <!--   4) no test is flagged, the prediction is as expected -->

```{r}
#| label: fig-logic-reg
#| fig.width: 6
#| fig.heigh: 2
#| fig-cap: Logic regression model fitted to the three unit tests (test1, test2, test3) and the outcome expectation (unexpect) as the response variable. The model suggests using an OR rule to combine test1 and test3 to predict the outcome expectation.
fit <- step_count |> fit_logic_reg(unexpect, test1:test3, seed = 1, nleaves = 4)
plot_logicreg(fit)
```

```{r}
fit_regtree <- rpart(unexpect ~ ., data = step_count |> dplyr::select(unexpect:test3), method = "class", 
                     control = rpart.control(cp = 0.01)) 
pred_vec <- predict(fit_regtree) |> as_tibble() |> mutate(.fitted = ifelse(`0` > `1`, 0, 1)) |> dplyr::select(.fitted)
regtree_df <- step_count |> dplyr::select(unexpect) |> bind_cols(pred_vec) |> 
  calc_miscla_rate(unexpect, .fitted) |> 
  mutate(overlapping = multiinformation(step_count[,c(9, 11)])/nrow(step_count), 
         independence = 1 - overlapping) |> 
  calc_metrics(metrics = c("harmonic", "arithmetic"))
```

```{r}
#| label: tbl-logic-reg
list(tibble(.fitted = step_count$test1, unexpect = step_count$unexpect),
     tibble(.fitted = step_count$test2, unexpect = step_count$unexpect),
     tibble(.fitted = step_count$test3, unexpect = step_count$unexpect)
) |>
  map_dfr(~.x |> calc_miscla_rate(unexpect, .fitted) |> 
            mutate(independence = 1) |> 
            calc_metrics(metrics = c("harmonic", "arithmetic")), .id = "tests") |> 
  mutate(tests = c("test1", "test2", "test3")) |>
  bind_rows(augment(fit) |> 
              calc_miscla_rate(unexpect, .fitted) |> 
              calc_independence() |> 
              calc_metrics(metrics = c("harmonic", "arithmetic")) |> 
              mutate(tests = "test1 OR test3") |> 
              dplyr::select(-overlapping)) |> 
  bind_rows(regtree_df |> 
              dplyr::select(-overlapping) |> 
              mutate(tests = "regression tree")) |>
  kable(digits = 3, 
        caption = "Accuracy (precision and recall) and parsimony (independence) metrics for each individual unit test and for the combined test rule (test1 OR test3) derived from the logic regression model. The harmonic and arithmetic means of the three metrics are included to evaluate the quality of the unit tests in  diagnosing unexpected step counts (more than five days with fewer than 8,000 steps).")
```

# Application {#sec-pm10-mortality}

A regression example is produced to illustrate the test selection process for analyzing the effect of PM10 on mortality. The example demonstrates how the procedure presented in @sec-method can be used to select cutoff values in the checks to diagnose an unexpected PM10 coefficient from the generalized linear model. 

Consider a generalized linear model (GLM) to study the effect of PM10 on mortality [TODO: provide more context of the mortality-PM10 study]. Analysts may expect a PM10 coefficient between [0, 0.005] after considering the temperature confounding [TODO: reference]. This expectation can be framed into a check that fails, labelled as 1, if the PM10 coefficient is outside the range [0, 0.005]. Multiple factors can impact the PM10 coefficient, such as the sample size, the strength of the correlation between mortality and PM10, and the strength of the correlation between mortality and temperature. Analysts may expect a reasonable sample size to ensure the reliability of the coefficient estimate. Outliers in the three variables can also leverage the coefficient. While these are possible factors that could affect the analysis result, it is not clear the cutoff values for these checks to determine a failure. Here a list of checks are created in @tbl-checks. 

| the check fails if ... | 
|--------------| 
| Sample size less than or equal to 200 |
| Sample size less than or equal to 400 |
| Sample size less than or equal to 600 |
| Sample size less than or equal to 800 |
| Mortality-PM10 correlation less than -0.03 |
| Mortality-PM10 correlation less than -0.04 |
| Mortality-PM10 correlation less than -0.05 |
| Mortality-PM10 correlation less than -0.06 |
| Mortality-temperature correlation greater than -0.3 | 
| Mortality-temperature correlation greater than -0.35 | 
| Mortality-temperature correlation greater than -0.4 | 
| Mortality-temperature correlation greater than -0.45 | 
| Outlier(s) are presented in the variable PM10 | 
| Outlier(s) are presented in the variable mortality | 

: A list of checks considered for the generalized linear model of mortality on PM10 and temperature. The checks are based on the sample size, correlation between mortality and PM10, correlation between mortality and temperature, and univariate outlier detection. Multiple cutoff values are specified for each check to determine a failure. {#tbl-checks} 

To generate replicate of the data, we first simulate the correlation matrix of the three variables in a grid and then use a Gaussian copula to generate a multivariate normal distribution based on the specified correlation matrix and sample size. The multivariate normal distribution is transformed using the normal CDF before the inverse CDF of the assumed distributions of the three variables is applied. To determine the appropriate distribution of each variable, various distributions are fitted and compared. This includes poisson and negative binomial for mortality; gamma, log-normal, exponential, weibull, and normal for pm10 and temperature; and beta for pm10 after rescaling the data to $[0-1]$. AIC is used to determine the best distribution fit for each variable with qq plot presented in @fig-dist-fit to evaluate the fit. AIC suggests a negative binomial distributio nfor mortality, a beta distribution for PM10 (multiple by 100 to obtain the original scale), and a Weibull distribution for temperature. To include the effect of outlier, we add a single outlier to the data for mortality and PM10 [more details].

```{r}
#| label: fig-dist-fit
#| fig-cap: QQ-plot of the distribution fit for mortality, PM10, and temperature based on the fitted distribution from the original data. The fitted distribution is compared to the observed data to assess the distribution fit. 
#| fig.height: 4
#| fig.width: 10
aa2 <- fitdistrplus::fitdist(pm10$mortality, "nbinom")
p1 <- tibble(fitted= rnbinom(558, size = aa2$estimate[1], mu = aa2$estimate[2]),
       observed= pm10$mortality) %>%
  ggplot(aes(sample = fitted)) +
  stat_qq() +
  stat_qq_line() + 
  theme_bw() + 
  theme(aspect.ratio = 1) + 
  ggtitle("mortality: \nNB(size = 74, mu = 183)")


aa6 <- fitdistrplus::fitdist(pm10$pm10[pm10$pm10 < 90]/100, "beta")
p2 <- tibble(fitted = rbeta(557, shape1 = aa6$estimate[1], shape2 = aa6$estimate[2]) * 100,
       observed = pm10$pm10[pm10$pm10 < 90]) %>%
  ggplot(aes(sample = fitted)) +
  stat_qq() +
  stat_qq_line() + 
  theme_bw() + 
  theme(aspect.ratio = 1) + 
  ggtitle("pm10: \n100 * beta(shp1 = 4.21, shp2 = 11.67)")
  

aa4 <- fitdistrplus::fitdist(pm10$temp, "weibull")
p3 <- tibble(fitted= rweibull(558, aa4$estimate[1], aa4$estimate[2]),
       observed= pm10$temp) %>%
  ggplot(aes(sample = fitted)) +
  stat_qq() +
  stat_qq_line() + 
  theme_bw() + 
  theme(aspect.ratio = 1) + 
  ggtitle("temperature: \nweibull(shape = 3.8, scale = 61)")

p1 | p2 | p3
```

```{r}
# cor(pm10$pm10, pm10$mortality)
# cor(pm10$temp, pm10$mortality)
# cor(pm10$temp, pm10$pm10)
corr_grid <- expand.grid(seq(0.01, 0.2, by = 0.02),                         
                         seq(0.25, 0.5, by = 0.05),                           
                         seq(0.25, 0.45, by = 0.05))  

gen_corr_mtx <- function(r1, r2, r3) {   
  # correlation between mortality and pm10 are negative - r1
  # correlation between mortality and temp are negative - r2
  cor_matrix <- matrix(c(1, -r1, -r2,                          
                         -r1, 1, r3,                          
                         -r2, r3, 1), nrow = 3, byrow = TRUE)          
  if (all(eigen(cor_matrix)$values > 0)) return(cor_matrix) 
  }  

corr_mtx <- lapply(1:nrow(corr_grid), function(i) {   
  gen_corr_mtx(corr_grid[i, 1], corr_grid[i, 2], corr_grid[i, 3]) }) 
corr_mtx <- corr_mtx[map_lgl(corr_mtx, ~!is.null(.x))]  
sample_size <- c(200, 400, 600, 800, 1000)
outlier <- c(TRUE, FALSE)  

generate_data <- function(n, mtx, seed = 123, outlier = FALSE) {   
  mu <- c(0, 0, 0)   
  set.seed(seed)  
  data <- mvrnorm(n, mu, mtx, empirical = TRUE)   
  U <- pnorm(data, mean = 0, sd = 1)   
  
  if (!outlier) {
   tibble(mortality = qnbinom(U[,1], size = 74, mu = 183),           
         pm10 = qbeta(U[,2], shape1 = 4.21, shape2 = 11.67) * 100,           
         temp = qweibull(U[,3], shape = 3.8, scale = 61))    
  } else{
    pm10_vec <- qbeta(U[,2], shape1 = 4.21, shape2 = 11.67) * 100
    tibble(
      mortality = c(qnbinom(U[,1], size = 74, mu = 183)[-1],
                    rnorm(n = 1, mean = 300, sd = 10)),           
      pm10 = c(pm10_vec[-1], rnorm(n = 1, mean = 100, sd = 10)),           
      temp = qweibull(U[,3], shape = 3.8, scale = 61)
      )    
  }
  
}

res <- tibble(corr_mtx = corr_mtx) |> 
  mutate(id = row_number()) |> 
  crossing(sample_size, outlier) |> 
  rowwise() |>   
  mutate(data = list(generate_data(n = sample_size, mtx = corr_mtx, outlier = outlier)),          
         fit = list(summary(glm(mortality ~ pm10 + temp, family = "poisson", data))$coefficients))  

pm10_df <- res |>   
  mutate(     
    p_value = fit[2,4],     
    coef = fit[2,1],     
    mor_pm10_correlation = corr_mtx[1, 2],     
    mor_temp_correlation = corr_mtx[1, 3],     
    temp_pm10_yz_correlation = corr_mtx[2, 3],     
    unexpect = ifelse(between(coef, 0, 0.005), 0, 1),
    `smpl_size <= 200` = ifelse(sample_size <= 200, 1, 0),
    `smpl_size <= 400` = ifelse(sample_size <= 400, 1, 0),
    `smpl_size <= 600` = ifelse(sample_size <= 600, 1, 0),
    `smpl_size <= 800` = ifelse(sample_size <= 800, 1, 0),
    `cor(m, PM10) < -0.03` = ifelse(mor_pm10_correlation < -0.03, 1, 0),
    `cor(m, PM10) < -0.04` = ifelse(mor_pm10_correlation < -0.04, 1, 0),
    `cor(m, PM10) < -0.05` = ifelse(mor_pm10_correlation < -0.05, 1, 0),
    `cor(m, PM10) < -0.06` = ifelse(mor_pm10_correlation < -0.06, 1, 0),
    `cor(m, tmp) > -0.3` = ifelse(mor_temp_correlation > -0.3, 1, 0),
    `cor(m, tmp) > -0.35` = ifelse(mor_temp_correlation > -0.35, 1, 0),
    `cor(m, tmp) > -0.4` = ifelse(mor_temp_correlation > -0.4, 1, 0),
    `cor(m, tmp) > -0.45` = ifelse(mor_temp_correlation > -0.45, 1, 0)
  ) |>    
  ungroup() 

pm10_df <- pm10_df |> 
  rowwise() |> 
  mutate(`PM10 outlier` = ifelse(any(scale(data$pm10) > 4), 1, 0),
         `mortality_outlier` = ifelse(any(scale(data$mortality) > 4), 1, 0)
         ) |> 
  ungroup()
```

::: {#fig-linear-reg-tree}

```{r}
#| fig.width: 8
#| fig.heigh: 3
fit <- pm10_df |> fit_logic_reg(unexpect, `smpl_size <= 200`:`mortality_outlier`, 
                                seed = 6, nleaves = 4)
plot_logicreg(fit) 
```
<!-- The caption with some LaTeX like this $\lambda$. -->

Logic regression model fitted to the twelve unit tests and the outcome expectation (unexpect) as the response variable. The model suggests the relationship:
($\text{cor}(\text{m}, \text{tmp}) > -0.35$ AND $\text{smpl\_size} \le 600$) OR $\text{cor}(\text{m},  \text{PM10}) < - 0.05$
:::

```{r}
#| label: tbl-linear-reg
library(kableExtra)
df <- list(
  tibble(.fitted = pm10_df$`smpl_size <= 200`, 
         unexpect = pm10_df$unexpect),
  tibble(.fitted = pm10_df$`cor(m, PM10) < -0.03`, 
         unexpect = pm10_df$unexpect),
  tibble(.fitted = pm10_df$`cor(m, tmp) > -0.35`, 
         unexpect = pm10_df$unexpect),
  tibble(.fitted = pm10_df$mortality_outlier, 
         unexpect = pm10_df$unexpect),
  augment(fit)) |>
  map_dfr(~.x |> calc_miscla_rate(unexpect, .fitted) |> 
            mutate(overlapping = 0, independence = 1) |> 
            calc_metrics(metrics = c("harmonic", "arithmetic")), .id = "id") 

tbl <- tibble(tests = c(1,2,3,4, 5)) |> bind_cols(df |> dplyr::select(-id)) 
tbl |> 
  kable(digits = 3, escape = FALSE,
        caption = "Accuracy (precision and recall) and parsimony (independence) metrics derived from the logic regression model, along with harmonic and arithmetic means, for individual unit tests (1: sample size, 2: mortality-PM10 correlation, 3: mortality-temperature correlation), and the combined test rule 4: (sample size AND mortality-temperature correlation) OR mortality-PM10 correlation.") 

```

A logic regression is fitted to predict whether the PM10 coefficient is unexpected (outside the range of [0, 0.005]) using the checks listed in @tbl-checks. Precision, recall, and independence score, along with their harmonic and arithmetic mean are calculated. @fig-linear-reg-tree shows the logic regression tree from the fitted model and @tbl-linear-reg prints the numerical summary of four selected single test and their combined test found by the logic regression. The logic regression model picks up the following cutoff value for each type of check:

-   sample size *larger than* 200
-   mortality-temperature correlation greater than -0.35
-   mortality-PM10 correlation less than -0.04
-   mortality contain outliers that are detected by the univariate outlier detection

<!-- (mortality-temperature correlation > -0.35 OR there exist mortality outlier) and (mortality-PM10 correlation < -0.04 AND (not sample size less than 200) )  -->

The tree structure suggests checking mortality-PM10 correlation and a sample size larger than 200 with an additional check of either outlier on mortality or correlation between mortality and temperature. This combined check rule generates a `r round(as.numeric(df[5, "precision"]), 3)` precision and a `r round(as.numeric(df[5, "recall"]), 3)` recall for predicting the unexpected PM10 coefficient. The single check, `cor(m, PM10) < -0.03`, is also powerful with a high precision of `r round(as.numeric(df[2, "precision"]), 3)`, but the low recall value of `r round(as.numeric(df[2, "recall"]), 3)` suggests its high false positive rate, as compared to the combined rule suggested by the logic regression.

# Discussion {#sec-discussion}

TODO

-   how to systematically simulate data is still unknown

-   plotting is a critical way to check data and they can still be frame into checks. i.e. the density/ histogram suggests there are outliers. It is a open problem to how to encode the visualization into checks. 

-   currently no automated way to generate checks. It is interesting to see how check generation can be automated, although it requires the inputs from experts across a wide array of common scenarios.

- checks are also closely related to the concept of unit tests in software engineering. While unit tests are designed to isolate and test specific aspects of the code, it is difficult for analysis validation check to do so.

-   There are cost and benefit on setting expectation on different granularity. At the lowest level, one may have a plan for each data entry and every data handling steps. This requires more work from the analysts and may not be practical in practice. For more complex analyses, analysts may divide the analysis into sections and set expectations for each. They can then focus on the specific sections flagged by the tests and sub-divide the sections to set expectation and diagnose the analysis in a hierarchical manner.


# Conclusion {#sec-conclusion}

TODO

# Acknowledgement

The article is created using Quarto [@Allaire_Quarto_2022] in R [@R].
The source code for reproducing the work reported in this paper can be
found at: <https://github.com/huizezhang-sherry/paper-avc>. 

# References
